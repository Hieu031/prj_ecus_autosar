
stm32f1_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026e4  080026e4  000036e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002708  08002708  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002708  08002708  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002708  08002708  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002708  08002708  00003708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800270c  0800270c  0000370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002710  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  0800271c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800271c  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a33a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002093  00000000  00000000  0000e36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00010408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ea  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001743d  00000000  00000000  000118ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5a2  00000000  00000000  00028cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f33  00000000  00000000  00036299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd1cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef0  00000000  00000000  000bd210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000c0100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026cc 	.word	0x080026cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026cc 	.word	0x080026cc

0800014c <App_Init>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void App_Init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Can_Init(&hcan);
 8000150:	480a      	ldr	r0, [pc, #40]	@ (800017c <App_Init+0x30>)
 8000152:	f002 f991 	bl	8002478 <Can_Init>
	Can_ConfigFilter(COM_RXPDU_CAN_ID);
 8000156:	f240 1023 	movw	r0, #291	@ 0x123
 800015a:	f002 f99b 	bl	8002494 <Can_ConfigFilter>
	Can_Start();
 800015e:	f002 f9c9 	bl	80024f4 <Can_Start>
	CanIf_Init();
 8000162:	f002 f983 	bl	800246c <CanIf_Init>

	Rte_Init();
 8000166:	f002 f9e9 	bl	800253c <Rte_Init>
	Swc_Alarm_Init();
 800016a:	f002 fa0d 	bl	8002588 <Swc_Alarm_Init>

	tick = HAL_GetTick();
 800016e:	f000 fae5 	bl	800073c <HAL_GetTick>
 8000172:	4603      	mov	r3, r0
 8000174:	4a02      	ldr	r2, [pc, #8]	@ (8000180 <App_Init+0x34>)
 8000176:	6013      	str	r3, [r2, #0]
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}
 800017c:	20000028 	.word	0x20000028
 8000180:	20000098 	.word	0x20000098

08000184 <App_Loop>:

void App_Loop(void) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 800018a:	f000 fad7 	bl	800073c <HAL_GetTick>
 800018e:	6078      	str	r0, [r7, #4]
	if (now - tick >= RTE_ALARM_PERIOD_MS) {
 8000190:	4b08      	ldr	r3, [pc, #32]	@ (80001b4 <App_Loop+0x30>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	1ad3      	subs	r3, r2, r3
 8000198:	2b63      	cmp	r3, #99	@ 0x63
 800019a:	d906      	bls.n	80001aa <App_Loop+0x26>
		tick += RTE_ALARM_PERIOD_MS;
 800019c:	4b05      	ldr	r3, [pc, #20]	@ (80001b4 <App_Loop+0x30>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	3364      	adds	r3, #100	@ 0x64
 80001a2:	4a04      	ldr	r2, [pc, #16]	@ (80001b4 <App_Loop+0x30>)
 80001a4:	6013      	str	r3, [r2, #0]
		Swc_Alarm_Runnable_100ms();
 80001a6:	f002 f9fb 	bl	80025a0 <Swc_Alarm_Runnable_100ms>
	}
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000098 	.word	0x20000098

080001b8 <main>:

int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  HAL_Init();
 80001bc:	f000 fa66 	bl	800068c <HAL_Init>
  SystemClock_Config();
 80001c0:	f000 f80b 	bl	80001da <SystemClock_Config>

  MX_GPIO_Init();
 80001c4:	f000 f8da 	bl	800037c <MX_GPIO_Init>
  MX_CAN_Init();
 80001c8:	f000 f848 	bl	800025c <MX_CAN_Init>
  MX_TIM3_Init();
 80001cc:	f000 f87c 	bl	80002c8 <MX_TIM3_Init>

  App_Init();
 80001d0:	f7ff ffbc 	bl	800014c <App_Init>

  while (1)
  {
	  App_Loop();
 80001d4:	f7ff ffd6 	bl	8000184 <App_Loop>
 80001d8:	e7fc      	b.n	80001d4 <main+0x1c>

080001da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	b090      	sub	sp, #64	@ 0x40
 80001de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	2228      	movs	r2, #40	@ 0x28
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 fa43 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fc:	2302      	movs	r3, #2
 80001fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000204:	2310      	movs	r3, #16
 8000206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000208:	2302      	movs	r3, #2
 800020a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800020c:	2300      	movs	r3, #0
 800020e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000210:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f99c 	bl	8001558 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000226:	f000 f8f3 	bl	8000410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800023a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2102      	movs	r1, #2
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fc09 	bl	8001a5c <HAL_RCC_ClockConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000250:	f000 f8de 	bl	8000410 <Error_Handler>
  }
}
 8000254:	bf00      	nop
 8000256:	3740      	adds	r7, #64	@ 0x40
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000260:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <MX_CAN_Init+0x64>)
 8000262:	4a18      	ldr	r2, [pc, #96]	@ (80002c4 <MX_CAN_Init+0x68>)
 8000264:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000266:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <MX_CAN_Init+0x64>)
 8000268:	2206      	movs	r2, #6
 800026a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <MX_CAN_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000272:	4b13      	ldr	r3, [pc, #76]	@ (80002c0 <MX_CAN_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <MX_CAN_Init+0x64>)
 800027a:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800027e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <MX_CAN_Init+0x64>)
 8000282:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000286:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <MX_CAN_Init+0x64>)
 800028a:	2200      	movs	r2, #0
 800028c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800028e:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <MX_CAN_Init+0x64>)
 8000290:	2201      	movs	r2, #1
 8000292:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000294:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <MX_CAN_Init+0x64>)
 8000296:	2201      	movs	r2, #1
 8000298:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800029a:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <MX_CAN_Init+0x64>)
 800029c:	2201      	movs	r2, #1
 800029e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002a0:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <MX_CAN_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002a6:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <MX_CAN_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <MX_CAN_Init+0x64>)
 80002ae:	f000 fa4f 	bl	8000750 <HAL_CAN_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002b8:	f000 f8aa 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000028 	.word	0x20000028
 80002c4:	40006400 	.word	0x40006400

080002c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	@ 0x28
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ce:	f107 0320 	add.w	r3, r7, #32
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]
 80002e6:	615a      	str	r2, [r3, #20]
 80002e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002ea:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <MX_TIM3_Init+0xac>)
 80002ec:	4a22      	ldr	r2, [pc, #136]	@ (8000378 <MX_TIM3_Init+0xb0>)
 80002ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80002f0:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <MX_TIM3_Init+0xac>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <MX_TIM3_Init+0xac>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <MX_TIM3_Init+0xac>)
 80002fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <MX_TIM3_Init+0xac>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b1a      	ldr	r3, [pc, #104]	@ (8000374 <MX_TIM3_Init+0xac>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000310:	4818      	ldr	r0, [pc, #96]	@ (8000374 <MX_TIM3_Init+0xac>)
 8000312:	f001 fcff 	bl	8001d14 <HAL_TIM_PWM_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800031c:	f000 f878 	bl	8000410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000328:	f107 0320 	add.w	r3, r7, #32
 800032c:	4619      	mov	r1, r3
 800032e:	4811      	ldr	r0, [pc, #68]	@ (8000374 <MX_TIM3_Init+0xac>)
 8000330:	f001 fff8 	bl	8002324 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800033a:	f000 f869 	bl	8000410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033e:	2360      	movs	r3, #96	@ 0x60
 8000340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	4619      	mov	r1, r3
 8000354:	4807      	ldr	r0, [pc, #28]	@ (8000374 <MX_TIM3_Init+0xac>)
 8000356:	f001 fd2d 	bl	8001db4 <HAL_TIM_PWM_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000360:	f000 f856 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000364:	4803      	ldr	r0, [pc, #12]	@ (8000374 <MX_TIM3_Init+0xac>)
 8000366:	f000 f8fd 	bl	8000564 <HAL_TIM_MspPostInit>

}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	@ 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000050 	.word	0x20000050
 8000378:	40000400 	.word	0x40000400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <MX_GPIO_Init+0x8c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1c      	ldr	r2, [pc, #112]	@ (8000408 <MX_GPIO_Init+0x8c>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <MX_GPIO_Init+0x8c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <MX_GPIO_Init+0x8c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a16      	ldr	r2, [pc, #88]	@ (8000408 <MX_GPIO_Init+0x8c>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <MX_GPIO_Init+0x8c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <MX_GPIO_Init+0x8c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a10      	ldr	r2, [pc, #64]	@ (8000408 <MX_GPIO_Init+0x8c>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <MX_GPIO_Init+0x8c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2120      	movs	r1, #32
 80003dc:	480b      	ldr	r0, [pc, #44]	@ (800040c <MX_GPIO_Init+0x90>)
 80003de:	f001 f8a3 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003e2:	2320      	movs	r3, #32
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	4804      	ldr	r0, [pc, #16]	@ (800040c <MX_GPIO_Init+0x90>)
 80003fa:	f000 ff11 	bl	8001220 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003fe:	bf00      	nop
 8000400:	3720      	adds	r7, #32
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40010c00 	.word	0x40010c00

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <Error_Handler+0x8>

0800041c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	@ (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	@ (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	@ (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a20      	ldr	r2, [pc, #128]	@ (800051c <HAL_CAN_MspInit+0x9c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d139      	bne.n	8000514 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000520 <HAL_CAN_MspInit+0xa0>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000520 <HAL_CAN_MspInit+0xa0>)
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	61d3      	str	r3, [r2, #28]
 80004ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <HAL_CAN_MspInit+0xa0>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <HAL_CAN_MspInit+0xa0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a18      	ldr	r2, [pc, #96]	@ (8000520 <HAL_CAN_MspInit+0xa0>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <HAL_CAN_MspInit+0xa0>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	480f      	ldr	r0, [pc, #60]	@ (8000524 <HAL_CAN_MspInit+0xa4>)
 80004e6:	f000 fe9b 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f4:	2303      	movs	r3, #3
 80004f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4809      	ldr	r0, [pc, #36]	@ (8000524 <HAL_CAN_MspInit+0xa4>)
 8000500:	f000 fe8e 	bl	8001220 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	2014      	movs	r0, #20
 800050a:	f000 fe52 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800050e:	2014      	movs	r0, #20
 8000510:	f000 fe6b 	bl	80011ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40006400 	.word	0x40006400
 8000520:	40021000 	.word	0x40021000
 8000524:	40010800 	.word	0x40010800

08000528 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a09      	ldr	r2, [pc, #36]	@ (800055c <HAL_TIM_PWM_MspInit+0x34>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d10b      	bne.n	8000552 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <HAL_TIM_PWM_MspInit+0x38>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <HAL_TIM_PWM_MspInit+0x38>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_TIM_PWM_MspInit+0x38>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40000400 	.word	0x40000400
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <HAL_TIM_MspPostInit+0x58>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d117      	bne.n	80005b4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <HAL_TIM_MspPostInit+0x5c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <HAL_TIM_MspPostInit+0x5c>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <HAL_TIM_MspPostInit+0x5c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800059c:	2340      	movs	r3, #64	@ 0x40
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <HAL_TIM_MspPostInit+0x60>)
 80005b0:	f000 fe36 	bl	8001220 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40000400 	.word	0x40000400
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <NMI_Handler+0x4>

080005d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <MemManage_Handler+0x4>

080005e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <UsageFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f87e 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000624:	4802      	ldr	r0, [pc, #8]	@ (8000630 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000626:	f000 fac0 	bl	8000baa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000028 	.word	0x20000028

08000634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000640:	f7ff fff8 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000646:	490c      	ldr	r1, [pc, #48]	@ (8000678 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <LoopFillZerobss+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800065c:	4c09      	ldr	r4, [pc, #36]	@ (8000684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066a:	f002 f80b 	bl	8002684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fda3 	bl	80001b8 <main>
  bx lr
 8000672:	4770      	bx	lr
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800067c:	08002710 	.word	0x08002710
  ldr r2, =_sbss
 8000680:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000684:	200000ac 	.word	0x200000ac

08000688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_2_IRQHandler>
	...

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <HAL_Init+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	@ (80006b4 <HAL_Init+0x28>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 fd7d 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 f808 	bl	80006b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff feb8 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_InitTick+0x54>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_InitTick+0x58>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fd95 	bl	8001206 <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f000 fd5d 	bl	80011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <HAL_InitTick+0x5c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000000 	.word	0x20000000
 8000710:	20000008 	.word	0x20000008
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_IncTick+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a03      	ldr	r2, [pc, #12]	@ (8000738 <HAL_IncTick+0x20>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000008 	.word	0x20000008
 8000738:	2000009c 	.word	0x2000009c

0800073c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b02      	ldr	r3, [pc, #8]	@ (800074c <HAL_GetTick+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	2000009c 	.word	0x2000009c

08000750 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e0ed      	b.n	800093e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d102      	bne.n	8000774 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fe86 	bl	8000480 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f042 0201 	orr.w	r2, r2, #1
 8000782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000784:	f7ff ffda 	bl	800073c <HAL_GetTick>
 8000788:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800078a:	e012      	b.n	80007b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800078c:	f7ff ffd6 	bl	800073c <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	2b0a      	cmp	r3, #10
 8000798:	d90b      	bls.n	80007b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800079e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2205      	movs	r2, #5
 80007aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e0c5      	b.n	800093e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0e5      	beq.n	800078c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f022 0202 	bic.w	r2, r2, #2
 80007ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007d0:	f7ff ffb4 	bl	800073c <HAL_GetTick>
 80007d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007d6:	e012      	b.n	80007fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007d8:	f7ff ffb0 	bl	800073c <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b0a      	cmp	r3, #10
 80007e4:	d90b      	bls.n	80007fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2205      	movs	r2, #5
 80007f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e09f      	b.n	800093e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1e5      	bne.n	80007d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7e1b      	ldrb	r3, [r3, #24]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d108      	bne.n	8000826 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e007      	b.n	8000836 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7e5b      	ldrb	r3, [r3, #25]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d108      	bne.n	8000850 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e007      	b.n	8000860 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800085e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7e9b      	ldrb	r3, [r3, #26]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 0220 	orr.w	r2, r2, #32
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e007      	b.n	800088a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f022 0220 	bic.w	r2, r2, #32
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7edb      	ldrb	r3, [r3, #27]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d108      	bne.n	80008a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f022 0210 	bic.w	r2, r2, #16
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e007      	b.n	80008b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0210 	orr.w	r2, r2, #16
 80008b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7f1b      	ldrb	r3, [r3, #28]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d108      	bne.n	80008ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f042 0208 	orr.w	r2, r2, #8
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	e007      	b.n	80008de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f022 0208 	bic.w	r2, r2, #8
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7f5b      	ldrb	r3, [r3, #29]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d108      	bne.n	80008f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f042 0204 	orr.w	r2, r2, #4
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	e007      	b.n	8000908 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 0204 	bic.w	r2, r2, #4
 8000906:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	431a      	orrs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	431a      	orrs	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	ea42 0103 	orr.w	r1, r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	430a      	orrs	r2, r1
 800092c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2201      	movs	r2, #1
 8000938:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000946:	b480      	push	{r7}
 8000948:	b087      	sub	sp, #28
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800095c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800095e:	7cfb      	ldrb	r3, [r7, #19]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d003      	beq.n	800096c <HAL_CAN_ConfigFilter+0x26>
 8000964:	7cfb      	ldrb	r3, [r7, #19]
 8000966:	2b02      	cmp	r3, #2
 8000968:	f040 80aa 	bne.w	8000ac0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000972:	f043 0201 	orr.w	r2, r3, #1
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	f003 031f 	and.w	r3, r3, #31
 8000984:	2201      	movs	r2, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	43db      	mvns	r3, r3
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d123      	bne.n	80009ee <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	401a      	ands	r2, r3
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3248      	adds	r2, #72	@ 0x48
 80009ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009e4:	6979      	ldr	r1, [r7, #20]
 80009e6:	3348      	adds	r3, #72	@ 0x48
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d122      	bne.n	8000a3c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	431a      	orrs	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3248      	adds	r2, #72	@ 0x48
 8000a1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a32:	6979      	ldr	r1, [r7, #20]
 8000a34:	3348      	adds	r3, #72	@ 0x48
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d109      	bne.n	8000a58 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000a56:	e007      	b.n	8000a68 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d109      	bne.n	8000a84 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000a82:	e007      	b.n	8000a94 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d107      	bne.n	8000aac <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ab2:	f023 0201 	bic.w	r2, r3, #1
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e006      	b.n	8000ace <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
  }
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d12e      	bne.n	8000b4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2202      	movs	r2, #2
 8000af0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 0201 	bic.w	r2, r2, #1
 8000b02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b04:	f7ff fe1a 	bl	800073c <HAL_GetTick>
 8000b08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b0a:	e012      	b.n	8000b32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b0c:	f7ff fe16 	bl	800073c <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b0a      	cmp	r3, #10
 8000b18:	d90b      	bls.n	8000b32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2205      	movs	r2, #5
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e012      	b.n	8000b58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1e5      	bne.n	8000b0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e006      	b.n	8000b58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b4e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
  }
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b70:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d002      	beq.n	8000b7e <HAL_CAN_ActivateNotification+0x1e>
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d109      	bne.n	8000b92 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6959      	ldr	r1, [r3, #20]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e006      	b.n	8000ba0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
  }
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b08a      	sub	sp, #40	@ 0x28
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d07c      	beq.n	8000cea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d023      	beq.n	8000c42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f983 	bl	8000f18 <HAL_CAN_TxMailbox0CompleteCallback>
 8000c12:	e016      	b.n	8000c42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d004      	beq.n	8000c28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c26:	e00c      	b.n	8000c42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c3a:	e002      	b.n	8000c42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f986 	bl	8000f4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d024      	beq.n	8000c96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f962 	bl	8000f2a <HAL_CAN_TxMailbox1CompleteCallback>
 8000c66:	e016      	b.n	8000c96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c7a:	e00c      	b.n	8000c96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d004      	beq.n	8000c90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c8e:	e002      	b.n	8000c96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 f965 	bl	8000f60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d024      	beq.n	8000cea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ca8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f941 	bl	8000f3c <HAL_CAN_TxMailbox2CompleteCallback>
 8000cba:	e016      	b.n	8000cea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cce:	e00c      	b.n	8000cea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d004      	beq.n	8000ce4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce2:	e002      	b.n	8000cea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 f944 	bl	8000f72 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00c      	beq.n	8000d0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00b      	beq.n	8000d30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2208      	movs	r2, #8
 8000d28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f933 	bl	8000f96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d009      	beq.n	8000d4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f91b 	bl	8000f84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00c      	beq.n	8000d72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2210      	movs	r2, #16
 8000d70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00b      	beq.n	8000d94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 f913 	bl	8000fba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8fb 	bl	8000fa8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00b      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2210      	movs	r2, #16
 8000dcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f8fc 	bl	8000fcc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2208      	movs	r2, #8
 8000dee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f8f4 	bl	8000fde <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d07b      	beq.n	8000ef8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d072      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d008      	beq.n	8000e42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d008      	beq.n	8000e5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d043      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d03e      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000e78:	2b60      	cmp	r3, #96	@ 0x60
 8000e7a:	d02b      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0x32a>
 8000e7c:	2b60      	cmp	r3, #96	@ 0x60
 8000e7e:	d82e      	bhi.n	8000ede <HAL_CAN_IRQHandler+0x334>
 8000e80:	2b50      	cmp	r3, #80	@ 0x50
 8000e82:	d022      	beq.n	8000eca <HAL_CAN_IRQHandler+0x320>
 8000e84:	2b50      	cmp	r3, #80	@ 0x50
 8000e86:	d82a      	bhi.n	8000ede <HAL_CAN_IRQHandler+0x334>
 8000e88:	2b40      	cmp	r3, #64	@ 0x40
 8000e8a:	d019      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x316>
 8000e8c:	2b40      	cmp	r3, #64	@ 0x40
 8000e8e:	d826      	bhi.n	8000ede <HAL_CAN_IRQHandler+0x334>
 8000e90:	2b30      	cmp	r3, #48	@ 0x30
 8000e92:	d010      	beq.n	8000eb6 <HAL_CAN_IRQHandler+0x30c>
 8000e94:	2b30      	cmp	r3, #48	@ 0x30
 8000e96:	d822      	bhi.n	8000ede <HAL_CAN_IRQHandler+0x334>
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d002      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0x2f8>
 8000e9c:	2b20      	cmp	r3, #32
 8000e9e:	d005      	beq.n	8000eac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000ea0:	e01d      	b.n	8000ede <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000eaa:	e019      	b.n	8000ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000eb4:	e014      	b.n	8000ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	f043 0320 	orr.w	r3, r3, #32
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000ebe:	e00f      	b.n	8000ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000ec8:	e00a      	b.n	8000ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000ed2:	e005      	b.n	8000ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000edc:	e000      	b.n	8000ee0 <HAL_CAN_IRQHandler+0x336>
            break;
 8000ede:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000eee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d008      	beq.n	8000f10 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f870 	bl	8000ff0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	@ 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4906      	ldr	r1, [pc, #24]	@ (800109c <__NVIC_EnableIRQ+0x34>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff90 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff2d 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff42 	bl	800104c <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff90 	bl	80010f4 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5f 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff35 	bl	8001068 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffa2 	bl	8001158 <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	@ 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	@ 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	@ 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	@ (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	@ (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	@ (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	@ (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	492c      	ldr	r1, [pc, #176]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4922      	ldr	r1, [pc, #136]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4918      	ldr	r1, [pc, #96]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e272      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8087 	beq.w	8001686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001578:	4b92      	ldr	r3, [pc, #584]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b04      	cmp	r3, #4
 8001582:	d00c      	beq.n	800159e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001584:	4b8f      	ldr	r3, [pc, #572]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d112      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5e>
 8001590:	4b8c      	ldr	r3, [pc, #560]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159c:	d10b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	4b89      	ldr	r3, [pc, #548]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d06c      	beq.n	8001684 <HAL_RCC_OscConfig+0x12c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d168      	bne.n	8001684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e24c      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x76>
 80015c0:	4b80      	ldr	r3, [pc, #512]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a7f      	ldr	r2, [pc, #508]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e02e      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x98>
 80015d6:	4b7b      	ldr	r3, [pc, #492]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a7a      	ldr	r2, [pc, #488]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b78      	ldr	r3, [pc, #480]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a77      	ldr	r2, [pc, #476]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0xbc>
 80015fa:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a71      	ldr	r2, [pc, #452]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b6f      	ldr	r3, [pc, #444]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6e      	ldr	r2, [pc, #440]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 8001614:	4b6b      	ldr	r3, [pc, #428]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6a      	ldr	r2, [pc, #424]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b68      	ldr	r3, [pc, #416]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a67      	ldr	r2, [pc, #412]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff f882 	bl	800073c <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff f87e 	bl	800073c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e200      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xe4>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff f86e 	bl	800073c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff f86a 	bl	800073c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	@ 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1ec      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x10c>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d063      	beq.n	800175a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001692:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800169e:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x18c>
 80016aa:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c0      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4939      	ldr	r1, [pc, #228]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e03a      	b.n	800175a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b36      	ldr	r3, [pc, #216]	@ (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff f823 	bl	800073c <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff f81f 	bl	800073c <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1a1      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4927      	ldr	r1, [pc, #156]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff f802 	bl	800073c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173c:	f7fe fffe 	bl	800073c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e180      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03a      	beq.n	80017dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d019      	beq.n	80017a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_RCC_OscConfig+0x274>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7fe ffe2 	bl	800073c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7fe ffde 	bl	800073c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e160      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 fa9c 	bl	8001cd8 <RCC_Delay>
 80017a0:	e01c      	b.n	80017dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_RCC_OscConfig+0x274>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7fe ffc8 	bl	800073c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ae:	e00f      	b.n	80017d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7fe ffc4 	bl	800073c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d908      	bls.n	80017d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e146      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	42420000 	.word	0x42420000
 80017cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	4b92      	ldr	r3, [pc, #584]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e9      	bne.n	80017b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80a6 	beq.w	8001936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b88      	ldr	r3, [pc, #544]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a87      	ldr	r2, [pc, #540]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b85      	ldr	r3, [pc, #532]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b82      	ldr	r3, [pc, #520]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	4b7f      	ldr	r3, [pc, #508]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7fe ff85 	bl	800073c <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7fe ff81 	bl	800073c <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	@ 0x64
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e103      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	4b75      	ldr	r3, [pc, #468]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x312>
 800185c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a6e      	ldr	r2, [pc, #440]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	e02d      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x334>
 8001872:	4b6a      	ldr	r3, [pc, #424]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a69      	ldr	r2, [pc, #420]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	4b67      	ldr	r3, [pc, #412]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a66      	ldr	r2, [pc, #408]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	e01c      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x356>
 8001894:	4b61      	ldr	r3, [pc, #388]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a60      	ldr	r2, [pc, #384]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 80018ae:	4b5b      	ldr	r3, [pc, #364]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b58      	ldr	r3, [pc, #352]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a57      	ldr	r2, [pc, #348]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7fe ff35 	bl	800073c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7fe ff31 	bl	800073c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0b1      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b4b      	ldr	r3, [pc, #300]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <HAL_RCC_OscConfig+0x37e>
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7fe ff1f 	bl	800073c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7fe ff1b 	bl	800073c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e09b      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8087 	beq.w	8001a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d061      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d146      	bne.n	80019e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7fe feef 	bl	800073c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001962:	f7fe feeb 	bl	800073c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e06d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4921      	ldr	r1, [pc, #132]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a19      	ldr	r1, [r3, #32]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	430b      	orrs	r3, r1
 80019ae:	491b      	ldr	r1, [pc, #108]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7fe febf 	bl	800073c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7fe febb 	bl	800073c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e03d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46a>
 80019e0:	e035      	b.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7fe fea8 	bl	800073c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7fe fea4 	bl	800073c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e026      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x498>
 8001a0e:	e01e      	b.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e019      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_RCC_OscConfig+0x500>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0d0      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b6a      	ldr	r3, [pc, #424]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b67      	ldr	r3, [pc, #412]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4965      	ldr	r1, [pc, #404]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b8      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab8:	4b59      	ldr	r3, [pc, #356]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b50      	ldr	r3, [pc, #320]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	494d      	ldr	r1, [pc, #308]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d040      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e07f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e073      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06b      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4936      	ldr	r1, [pc, #216]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe fdf6 	bl	800073c <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7fe fdf2 	bl	800073c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e053      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d210      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4922      	ldr	r1, [pc, #136]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e032      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4916      	ldr	r1, [pc, #88]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	490e      	ldr	r1, [pc, #56]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bea:	f000 f821 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	490a      	ldr	r1, [pc, #40]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	5ccb      	ldrb	r3, [r1, r3]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <HAL_RCC_ClockConfig+0x1cc>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_RCC_ClockConfig+0x1d0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fd54 	bl	80006b8 <HAL_InitTick>

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	080026e4 	.word	0x080026e4
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x30>
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x36>
 8001c5e:	e027      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c62:	613b      	str	r3, [r7, #16]
      break;
 8001c64:	e027      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0c9b      	lsrs	r3, r3, #18
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	0c5b      	lsrs	r3, r3, #17
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	4a11      	ldr	r2, [pc, #68]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e004      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	613b      	str	r3, [r7, #16]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb2:	613b      	str	r3, [r7, #16]
      break;
 8001cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb6:	693b      	ldr	r3, [r7, #16]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	007a1200 	.word	0x007a1200
 8001ccc:	080026f4 	.word	0x080026f4
 8001cd0:	08002704 	.word	0x08002704
 8001cd4:	003d0900 	.word	0x003d0900

08001cd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <RCC_Delay+0x34>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <RCC_Delay+0x38>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0a5b      	lsrs	r3, r3, #9
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cf4:	bf00      	nop
  }
  while (Delay --);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	60fa      	str	r2, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f9      	bne.n	8001cf4 <RCC_Delay+0x1c>
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	10624dd3 	.word	0x10624dd3

08001d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fbf4 	bl	8000528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 f8f0 	bl	8001f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e0ae      	b.n	8001f30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	f200 809f 	bhi.w	8001f20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001de2:	a201      	add	r2, pc, #4	@ (adr r2, 8001de8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e1d 	.word	0x08001e1d
 8001dec:	08001f21 	.word	0x08001f21
 8001df0:	08001f21 	.word	0x08001f21
 8001df4:	08001f21 	.word	0x08001f21
 8001df8:	08001e5d 	.word	0x08001e5d
 8001dfc:	08001f21 	.word	0x08001f21
 8001e00:	08001f21 	.word	0x08001f21
 8001e04:	08001f21 	.word	0x08001f21
 8001e08:	08001e9f 	.word	0x08001e9f
 8001e0c:	08001f21 	.word	0x08001f21
 8001e10:	08001f21 	.word	0x08001f21
 8001e14:	08001f21 	.word	0x08001f21
 8001e18:	08001edf 	.word	0x08001edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f8f6 	bl	8002014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6999      	ldr	r1, [r3, #24]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	619a      	str	r2, [r3, #24]
      break;
 8001e5a:	e064      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f93c 	bl	80020e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6999      	ldr	r1, [r3, #24]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	021a      	lsls	r2, r3, #8
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	619a      	str	r2, [r3, #24]
      break;
 8001e9c:	e043      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f985 	bl	80021b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0208 	orr.w	r2, r2, #8
 8001eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0204 	bic.w	r2, r2, #4
 8001ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69d9      	ldr	r1, [r3, #28]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	61da      	str	r2, [r3, #28]
      break;
 8001edc:	e023      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f9cf 	bl	8002288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69d9      	ldr	r1, [r3, #28]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	021a      	lsls	r2, r3, #8
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	61da      	str	r2, [r3, #28]
      break;
 8001f1e:	e002      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	75fb      	strb	r3, [r7, #23]
      break;
 8001f24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002008 <TIM_Base_SetConfig+0xd0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00b      	beq.n	8001f68 <TIM_Base_SetConfig+0x30>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f56:	d007      	beq.n	8001f68 <TIM_Base_SetConfig+0x30>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <TIM_Base_SetConfig+0xd4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <TIM_Base_SetConfig+0x30>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a2b      	ldr	r2, [pc, #172]	@ (8002010 <TIM_Base_SetConfig+0xd8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <TIM_Base_SetConfig+0xd0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <TIM_Base_SetConfig+0x62>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f88:	d007      	beq.n	8001f9a <TIM_Base_SetConfig+0x62>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <TIM_Base_SetConfig+0xd4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_Base_SetConfig+0x62>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1e      	ldr	r2, [pc, #120]	@ (8002010 <TIM_Base_SetConfig+0xd8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <TIM_Base_SetConfig+0xd0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d103      	bne.n	8001fe0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f023 0201 	bic.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
  }
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800

08002014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 0201 	bic.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f023 0302 	bic.w	r3, r3, #2
 800205c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <TIM_OC1_SetConfig+0xc8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d10c      	bne.n	800208a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0308 	bic.w	r3, r3, #8
 8002076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a13      	ldr	r2, [pc, #76]	@ (80020dc <TIM_OC1_SetConfig+0xc8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80020a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	621a      	str	r2, [r3, #32]
}
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40012c00 	.word	0x40012c00

080020e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f023 0210 	bic.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800210e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 0320 	bic.w	r3, r3, #32
 800212a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <TIM_OC2_SetConfig+0xd0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10d      	bne.n	800215c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800215a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <TIM_OC2_SetConfig+0xd0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d113      	bne.n	800218c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800216a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40012c00 	.word	0x40012c00

080021b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1d      	ldr	r2, [pc, #116]	@ (8002284 <TIM_OC3_SetConfig+0xd0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10d      	bne.n	800222e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800222c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a14      	ldr	r2, [pc, #80]	@ (8002284 <TIM_OC3_SetConfig+0xd0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d113      	bne.n	800225e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800223c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	621a      	str	r2, [r3, #32]
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40012c00 	.word	0x40012c00

08002288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	031b      	lsls	r3, r3, #12
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <TIM_OC4_SetConfig+0x98>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d109      	bne.n	80022fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	621a      	str	r2, [r3, #32]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40012c00 	.word	0x40012c00

08002324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002338:	2302      	movs	r3, #2
 800233a:	e046      	b.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002388:	d009      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a12      	ldr	r2, [pc, #72]	@ (80023d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a10      	ldr	r2, [pc, #64]	@ (80023dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10c      	bne.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40000400 	.word	0x40000400
 80023dc:	40000800 	.word	0x40000800

080023e0 <Buzzer_Init>:
#include "Buzzer.h"
#include "EcuC_Cfg.h"
#include "Dio.h"

void Buzzer_Init(void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <Buzzer_Init+0x58>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <Buzzer_Init+0x58>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6193      	str	r3, [r2, #24]
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <Buzzer_Init+0x58>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
    g.Pin = BUZZER_PIN;
 800240c:	2320      	movs	r3, #32
 800240e:	60bb      	str	r3, [r7, #8]
    g.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
    g.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUZZER_PORT, &g);
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <Buzzer_Init+0x5c>)
 8002424:	f7fe fefc 	bl	8001220 <HAL_GPIO_Init>
    Buzzer_Set(0);
 8002428:	2000      	movs	r0, #0
 800242a:	f000 f809 	bl	8002440 <Buzzer_Set>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40010c00 	.word	0x40010c00

08002440 <Buzzer_Set>:

void Buzzer_Set(uint8_t on) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
    Dio_WritePin(BUZZER_PORT, BUZZER_PIN, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	2120      	movs	r1, #32
 800245a:	4803      	ldr	r0, [pc, #12]	@ (8002468 <Buzzer_Set+0x28>)
 800245c:	f000 f85c 	bl	8002518 <Dio_WritePin>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40010c00 	.word	0x40010c00

0800246c <CanIf_Init>:
#include "Com_Cfg.h"
#include "PduR_Cfg.h"

void PduR_CanIfRxIndication(uint8_t RxPduId, const uint8_t *data, uint8_t dlc);

void CanIf_Init(void) {}
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <Can_Init>:
#include "Can.h"

static CAN_HandleTypeDef *s_hcan;

void Can_Init(CAN_HandleTypeDef *hcan) {
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    s_hcan = hcan;
 8002480:	4a03      	ldr	r2, [pc, #12]	@ (8002490 <Can_Init+0x18>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	200000a0 	.word	0x200000a0

08002494 <Can_ConfigFilter>:

void Can_ConfigFilter(uint16_t stdid) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	@ 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
    CAN_FilterTypeDef f = {0};
 800249e:	f107 0308 	add.w	r3, r7, #8
 80024a2:	2228      	movs	r2, #40	@ 0x28
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f8e4 	bl	8002674 <memset>
    f.FilterBank = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
    f.FilterMode = CAN_FILTERMODE_IDMASK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
    f.FilterScale = CAN_FILTERSCALE_32BIT;
 80024b4:	2301      	movs	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
    f.FilterIdHigh     = (stdid << 5);
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	015b      	lsls	r3, r3, #5
 80024bc:	60bb      	str	r3, [r7, #8]
    f.FilterIdLow      = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
    f.FilterMaskIdHigh = (0x7FF << 5);
 80024c2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024c6:	613b      	str	r3, [r7, #16]
    f.FilterMaskIdLow  = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
    f.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    f.FilterActivation = ENABLE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    f.SlaveStartFilterBank = 14;
 80024d4:	230e      	movs	r3, #14
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_CAN_ConfigFilter(s_hcan, &f);
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <Can_ConfigFilter+0x5c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f107 0208 	add.w	r2, r7, #8
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fa2f 	bl	8000946 <HAL_CAN_ConfigFilter>
}
 80024e8:	bf00      	nop
 80024ea:	3730      	adds	r7, #48	@ 0x30
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200000a0 	.word	0x200000a0

080024f4 <Can_Start>:

void Can_Start(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
    HAL_CAN_Start(s_hcan);
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <Can_Start+0x20>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe faeb 	bl	8000ad8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(s_hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002502:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <Can_Start+0x20>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2102      	movs	r1, #2
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fb29 	bl	8000b60 <HAL_CAN_ActivateNotification>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200000a0 	.word	0x200000a0

08002518 <Dio_WritePin>:
#include "Dio.h"

void Dio_WritePin(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(port, pin, state);
 8002528:	787a      	ldrb	r2, [r7, #1]
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fffa 	bl	8001528 <HAL_GPIO_WritePin>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <Rte_Init>:
#include "Rte.h"
#include "Com.h"
#include "Com_Types.h"
#include "Buzzer.h"

void Rte_Init(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
    Com_Init();
 8002540:	f000 f86c 	bl	800261c <Com_Init>
    Buzzer_Init();
 8002544:	f7ff ff4c 	bl	80023e0 <Buzzer_Init>
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <Rte_Read_Temp_x10>:

int16_t Rte_Read_Temp_x10(void) {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	return Com_ReadSignal(COM_SIG_Temp_x10);
 8002550:	2000      	movs	r0, #0
 8002552:	f000 f87d 	bl	8002650 <Com_ReadSignal>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}

0800255c <Rte_Read_Humi_x10>:

int16_t Rte_Read_Humi_x10(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	return Com_ReadSignal(COM_SIG_Humi_x10);
 8002560:	2001      	movs	r0, #1
 8002562:	f000 f875 	bl	8002650 <Com_ReadSignal>
 8002566:	4603      	mov	r3, r0
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}

0800256c <Rte_Call_Buzzer_Set>:

void Rte_Call_Buzzer_Set(uint8_t on) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
	Buzzer_Set(on);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff61 	bl	8002440 <Buzzer_Set>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <Swc_Alarm_Init>:
#include "Rte.h"
#include "Com_Cfg.h"

static uint8_t s_alarm=0;

void Swc_Alarm_Init(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
    s_alarm=0;
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <Swc_Alarm_Init+0x14>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
    Rte_Call_Buzzer_Set(0);
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff ffea 	bl	800256c <Rte_Call_Buzzer_Set>
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200000a4 	.word	0x200000a4

080025a0 <Swc_Alarm_Runnable_100ms>:

void Swc_Alarm_Runnable_100ms(void) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
    int16_t T = Rte_Read_Temp_x10();
 80025a6:	f7ff ffd1 	bl	800254c <Rte_Read_Temp_x10>
 80025aa:	4603      	mov	r3, r0
 80025ac:	80bb      	strh	r3, [r7, #4]
    int16_t H = Rte_Read_Humi_x10();
 80025ae:	f7ff ffd5 	bl	800255c <Rte_Read_Humi_x10>
 80025b2:	4603      	mov	r3, r0
 80025b4:	807b      	strh	r3, [r7, #2]

    uint8_t need = s_alarm;
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <Swc_Alarm_Runnable_100ms+0x78>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
    if (!s_alarm) {
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <Swc_Alarm_Runnable_100ms+0x78>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10c      	bne.n	80025de <Swc_Alarm_Runnable_100ms+0x3e>
        if (T >= COM_TEMP_HIGH_X10 || H >= COM_HUMI_HIGH_X10)
 80025c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025c8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80025cc:	da04      	bge.n	80025d8 <Swc_Alarm_Runnable_100ms+0x38>
 80025ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025d2:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80025d6:	db0e      	blt.n	80025f6 <Swc_Alarm_Runnable_100ms+0x56>
        	need=1;
 80025d8:	2301      	movs	r3, #1
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	e00b      	b.n	80025f6 <Swc_Alarm_Runnable_100ms+0x56>
    } else {
        if (T <= (COM_TEMP_HIGH_X10-COM_TEMP_HYS_X10) &&
 80025de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025e2:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80025e6:	dc06      	bgt.n	80025f6 <Swc_Alarm_Runnable_100ms+0x56>
 80025e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025ec:	f5b3 7f43 	cmp.w	r3, #780	@ 0x30c
 80025f0:	dc01      	bgt.n	80025f6 <Swc_Alarm_Runnable_100ms+0x56>
            H <= (COM_HUMI_HIGH_X10-COM_HUMI_HYS_X10))
        	need=0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	71fb      	strb	r3, [r7, #7]
    }

    if (need != s_alarm) {
 80025f6:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <Swc_Alarm_Runnable_100ms+0x78>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d007      	beq.n	8002610 <Swc_Alarm_Runnable_100ms+0x70>
        s_alarm = need;
 8002600:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <Swc_Alarm_Runnable_100ms+0x78>)
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	7013      	strb	r3, [r2, #0]
        Rte_Call_Buzzer_Set(s_alarm);
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <Swc_Alarm_Runnable_100ms+0x78>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ffae 	bl	800256c <Rte_Call_Buzzer_Set>
    }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200000a4 	.word	0x200000a4

0800261c <Com_Init>:
#include "Com.h"

static volatile Com_SignalType s_sigBuf[COM_SIGNAL_NUM];

void Com_Init(void) {
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
    for (int i=0;i<COM_SIGNAL_NUM;i++)
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	e007      	b.n	8002638 <Com_Init+0x1c>
    	s_sigBuf[i]=0;
 8002628:	4a08      	ldr	r2, [pc, #32]	@ (800264c <Com_Init+0x30>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2100      	movs	r1, #0
 800262e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i=0;i<COM_SIGNAL_NUM;i++)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3301      	adds	r3, #1
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	ddf4      	ble.n	8002628 <Com_Init+0xc>
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200000a8 	.word	0x200000a8

08002650 <Com_ReadSignal>:
    int16_t H = (int16_t)(data[2] | (data[3]<<8));
    s_sigBuf[COM_SIG_Temp_x10] = T;
    s_sigBuf[COM_SIG_Humi_x10] = H;
}

Com_SignalType Com_ReadSignal(Com_SignalIdType sigId) {
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
    return s_sigBuf[sigId];
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4a04      	ldr	r2, [pc, #16]	@ (8002670 <Com_ReadSignal+0x20>)
 800265e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002662:	b21b      	sxth	r3, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	200000a8 	.word	0x200000a8

08002674 <memset>:
 8002674:	4603      	mov	r3, r0
 8002676:	4402      	add	r2, r0
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	f803 1b01 	strb.w	r1, [r3], #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	2600      	movs	r6, #0
 8002688:	4d0c      	ldr	r5, [pc, #48]	@ (80026bc <__libc_init_array+0x38>)
 800268a:	4c0d      	ldr	r4, [pc, #52]	@ (80026c0 <__libc_init_array+0x3c>)
 800268c:	1b64      	subs	r4, r4, r5
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	42a6      	cmp	r6, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	f000 f81a 	bl	80026cc <_init>
 8002698:	2600      	movs	r6, #0
 800269a:	4d0a      	ldr	r5, [pc, #40]	@ (80026c4 <__libc_init_array+0x40>)
 800269c:	4c0a      	ldr	r4, [pc, #40]	@ (80026c8 <__libc_init_array+0x44>)
 800269e:	1b64      	subs	r4, r4, r5
 80026a0:	10a4      	asrs	r4, r4, #2
 80026a2:	42a6      	cmp	r6, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ac:	4798      	blx	r3
 80026ae:	3601      	adds	r6, #1
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b6:	4798      	blx	r3
 80026b8:	3601      	adds	r6, #1
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	08002708 	.word	0x08002708
 80026c0:	08002708 	.word	0x08002708
 80026c4:	08002708 	.word	0x08002708
 80026c8:	0800270c 	.word	0x0800270c

080026cc <_init>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	bf00      	nop
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr

080026d8 <_fini>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr
